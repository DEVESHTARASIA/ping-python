#!/usr/bin/python -u

# PingMessage.py
# Python implementation of the Blue Robotics 'Ping' binary message protocol

#~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!
# THIS IS AN AUTOGENERATED FILE
# DO NOT EDIT
#~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!
#pragma once

#include "Stream.h"
#include "pingmessage_all.h"

class Ping1D
{
public:
  Ping1D(Stream& ser, uint32_t baudrate) : _stream ( ser )
  {
  }
  
  PingMessage* read()
  {
    while(_stream.available()) {
        if (_parser.parseByte(_stream.read()) == PingParser::NEW_MESSAGE) {
          handleMessage(&_parser.rxMsg);
          return &_parser.rxMsg;
        }
    }
    return nullptr;
  }
  
  size_t write(uint8_t* data, uint16_t length)
  {
    return _stream.write(data, length);
  }
  /**
  *
  *
  *
  *  *  *
  */
  bool initialize(uint16_t ping_interval_ms = 50, speed_of_sound = 1500000))
  {
      if(!request(Ping1DNamespace::Device_id)) {
        return false;
      }

      if (!request(Ping1DNamespace::Fw_version)) {
        return false;
      }

      if(!request(Ping1DNamespace::Voltage_5)) {
        return false;
      }

      if (!request(Ping1DNamespace::Pcb_temperature)) {
        //return false;
      }

      // Configure ping interval
      //if (!set_ping_interval(ping_interval_ms) {
        //return false;
      //}
      
      return true;
  }
  
  PingMessage* waitReply(enum Ping1DNamespace::msg_ping1D_id id, uint16_t timeout_ms)
  {
      uint32_t tstart = millis();
      while (millis() < tstart + timeout_ms) {

        PingMessage* pmsg = read();

        if (!pmsg) {
          continue;
        }

        handleMessage(pmsg);

        if (pmsg->message_id() == Ping1DNamespace::Nack) {
          ping_msg_ping1D_nack nack(*pmsg);

          if (nack.nacked_id() == id) {
            return nullptr;
          }
        }

        if (pmsg->message_id() == id) {
          return pmsg;
        }
      }

      debug("timed out waiting for id %d", id);
      return nullptr;
  }
  
  void handleMessage(PingMessage* pmsg)
  {
    switch (pmsg->message_id()) {
      case Ping1DNamespace::Nack: {
          ping_msg_ping1D_nack nack(*pmsg);
          debug("got NACK (%d) %s", nack.nacked_id(), nack.nack_msg());
      }
          break;
      case Ping1DNamespace::Distance:
      {
          ping_msg_ping1D_distance m(*pmsg);
          _distance = m.distance();
          _confidence = m.confidence();
      }
          break;
      case Ping1DNamespace::Distance_simple:
      {
          ping_msg_ping1D_distance_simple m(*pmsg);
          _distance = m.distance();
          _confidence = m.confidence();
      }
          break;
      default:
          break;
    }
  }

  // ex ping_msg_ping1D_voltage_5 msg(*pd.request(Ping1DNamespace::Voltage_5));
  PingMessage* request(enum Ping1DNamespace::msg_ping1D_id id, uint16_t timeout_ms = 400)
  {
    ping_msg_ping1D_empty msg;
    msg.set_id(id);
    msg.updateChecksum();
    write(msg.msgData, msg.msgDataLength());
    return waitReply(id, timeout_ms);
  }
  
  // ex auto msg = pd.request<ping_msg_ping1D_voltage_5>();
  template <typename T>
  T* request() {
    T resp; // todo there should be some other (static) way to get the message id?
    static ping_msg_ping1D_empty req;
    req.set_id(resp.message_id());
    req.updateChecksum();
    write(req.msgData, req.msgDataLength());
    return (T*)waitReply(resp.message_id());
  }


  bool update() {
      return request(Ping1DNamespace::Distance_simple);
  }

    /** Device information
    *   Returns a dictionary of the reply payload
    *   @return device_type: Device type. 0: 1D Echosounder
    *   @return device_model: Device model. 0: Ping1D
    *   @return fw_version_major: Firmware version major number.
    *   @return fw_version_minor: Firmware version minor number.
    */
    bool get_fw_version(uint8_t* device_type = nullptr,
                      uint8_t* device_model = nullptr,
                      uint16_t* fw_version_major = nullptr,
                      uint16_t* fw_version_minor = nullptr);

    /** The device ID.
    *   Returns a dictionary of the reply payload
    *   @return device_id: The device ID (0-254). 255 is reserved for broadcast messages.
    */
    bool get_device_id(uint8_t* device_id = nullptr);

    /** The 5V rail voltage.
    *   Returns a dictionary of the reply payload
    *   @return mvolts: Units: mV; The 5V rail voltage.
    */
    bool get_voltage_5(uint16_t* mvolts = nullptr);

    /** The speed of sound used for distance calculations.
    *   Returns a dictionary of the reply payload
    *   @return speed_of_sound: Units: mm/s; The speed of sound in the measurement medium. ~1,500,000 mm/s for water.
    */
    bool get_speed_of_sound(uint32_t* speed_of_sound = nullptr);

    /** The scan range for acoustic measurements. Measurements returned by the device will lie in the range (scan_start, scan_start + scan_length).
    *   Returns a dictionary of the reply payload
    *   @return scan_start: Units: mm; The beginning of the scan range in mm from the transducer.
    *   @return scan_length: Units: mm; The length of the scan range.
    */
    bool get_range(uint32_t* scan_start = nullptr,
                      uint32_t* scan_length = nullptr);

    /** The current operating mode of the device. Manual mode allows for manual selection of the gain and scan range.
    *   Returns a dictionary of the reply payload
    *   @return mode_auto: 0: manual mode, 1: auto mode
    */
    bool get_mode_auto(uint8_t* mode_auto = nullptr);

    /** The interval between acoustic measurements.
    *   Returns a dictionary of the reply payload
    *   @return ping_rate: Units: ms; The interval between acoustic measurements.
    */
    bool get_ping_rate(uint16_t* ping_rate = nullptr);

    /** The current gain setting.
    *   Returns a dictionary of the reply payload
    *   @return gain_index: 0: 0.6dB, 1: 1.8dB, 2: 5.5dB, 3: 12.9dB, 4: 30.2dB, 5: 66.1dB, 6: 144dB
    */
    bool get_gain_index(uint32_t* gain_index = nullptr);

    /** The duration of the acoustic activation/transmission.
    *   Returns a dictionary of the reply payload
    *   @return pulse_usec: Units: microseconds; Acoustic pulse duration.
    */
    bool get_pulse_usec(uint16_t* pulse_usec = nullptr);

    /** General information.
    *   Returns a dictionary of the reply payload
    *   @return fw_version_major: Firmware major version.
    *   @return fw_version_minor: Firmware minor version.
    *   @return mvolts: Units: mV; Device supply voltage.
    *   @return ping_rate: Units: ms; The interval between acoustic measurements.
    *   @return gain_index: The current gain setting. 0: 0.6dB, 1: 1.8dB, 2: 5.5dB, 3: 12.9dB, 4: 30.2dB, 5: 66.1dB, 6: 144dB
    *   @return mode_auto: The current operating mode of the device. 0: manual mode, 1: auto mode
    */
    bool get_general_info(uint16_t* fw_version_major = nullptr,
                      uint16_t* fw_version_minor = nullptr,
                      uint16_t* mvolts = nullptr,
                      uint16_t* ping_rate = nullptr,
                      uint8_t* gain_index = nullptr,
                      uint8_t* mode_auto = nullptr);

    /** The distance to target with confidence estimate.
    *   Returns a dictionary of the reply payload
    *   @return distance: Units: mm; Distance to the target.
    *   @return confidence: Units: %; Confidence in the distance measurement.
    */
    bool get_distance_simple(uint32_t* distance = nullptr,
                      uint8_t* confidence = nullptr);

    /** 
    *   Returns a dictionary of the reply payload
    *   @return distance: Units: mm; The current return distance determined for the most recent acoustic measurement.
    *   @return confidence: Units: %; Confidence in the most recent range measurement.
    *   @return pulse_usec: Units: us; The acoustic pulse length during acoustic transmission/activation.
    *   @return ping_number: The pulse/measurement count since boot.
    *   @return scan_start: Units: mm; The beginning of the scan region in mm from the transducer.
    *   @return scan_length: Units: mm; The length of the scan region.
    *   @return gain_index: The current gain setting. 0: 0.6dB, 1: 1.8dB, 2: 5.5dB, 3: 12.9dB, 4: 30.2dB, 5: 66.1dB, 6: 144dB
    */
    bool get_distance(uint32_t* distance = nullptr,
                      uint16_t* confidence = nullptr,
                      uint16_t* pulse_usec = nullptr,
                      uint32_t* ping_number = nullptr,
                      uint32_t* scan_start = nullptr,
                      uint32_t* scan_length = nullptr,
                      uint32_t* gain_index = nullptr);

    /** Temperature of the device cpu.
    *   Returns a dictionary of the reply payload
    *   @return temp: Units: cC; The temperature in centi-degrees Centigrade (100 * degrees C).
    */
    bool get_processor_temperature(uint16_t* temp = nullptr);

    /** Temperature of the on-board thermistor.
    *   Returns a dictionary of the reply payload
    *   @return temp: Units: cC; The temperature in centi-degrees Centigrade (100 * degrees C).
    */
    bool get_pcb_temperature(uint16_t* temp = nullptr);

    /** A profile produced from a single acoustic measurement. The data returned is an array of response strength at even intervals across the scan region. The scan region is defined as the region between <scan_start> and <scan_start + scan_length> millimeters away from the transducer. A distance measurement to the target is also provided.
    *   Returns a dictionary of the reply payload
    *   @return distance: Units: mm; The current return distance determined for the most recent acoustic measurement.
    *   @return confidence: Units: %; Confidence in the most recent range measurement.
    *   @return pulse_usec: Units: us; The acoustic pulse length during acoustic transmission/activation.
    *   @return ping_number: The pulse/measurement count since boot.
    *   @return scan_start: Units: mm; The beginning of the scan region in mm from the transducer.
    *   @return scan_length: Units: mm; The length of the scan region.
    *   @return gain_index: The current gain setting. 0: 0.6dB, 1: 1.8dB, 2: 5.5dB, 3: 12.9dB, 4: 30.2dB, 5: 66.1dB, 6: 144dB
    *   @return num_points: The number of data points for the profile. (The length of the proceeding array)
    *   @return data: An array of return strength measurements taken at regular intervals across the scan region.
    */
    bool get_profile(uint32_t* distance = nullptr,
                      uint16_t* confidence = nullptr,
                      uint16_t* pulse_usec = nullptr,
                      uint32_t* ping_number = nullptr,
                      uint32_t* scan_start = nullptr,
                      uint32_t* scan_length = nullptr,
                      uint32_t* gain_index = nullptr,
                      uint16_t* num_points = nullptr,
                      uint8_t* data = nullptr);

    /** The protocol version
    *   Returns a dictionary of the reply payload
    *   @return protocol_version: 
    */
    bool get_protocol_version(uint32_t* protocol_version = nullptr);


    /** Set the device ID.
    *   @param device_id - Device ID (0-254). 255 is reserved for broadcast messages.
    */
    void set_device_id(device_id, verify=True);

    /** Set the scan range for acoustic measurements.
    *   @param scan_start - Units: mm; 
    *   @param scan_length - Units: mm; The length of the scan range.
    */
    void set_range(scan_start, scan_length, verify=True);

    /** Set the speed of sound used for distance calculations.
    *   @param speed_of_sound - Units: mm/s; The speed of sound in the measurement medium. ~1,500,000 mm/s for water.
    */
    void set_speed_of_sound(speed_of_sound, verify=True);

    /** Set automatic or manual mode. Manual mode allows for manual selection of the gain and scan range.
    *   @param mode_auto - 0: manual mode. 1: auto mode.
    */
    void set_mode_auto(mode_auto, verify=True);

    /** The interval between acoustic measurements.
    *   @param ping_rate - Units: ms; The interval between acoustic measurements.
    */
    void set_ping_rate(ping_rate, verify=True);

    /** Set the current gain selection.
    *   @param gain_index - 0: 0.6dB, 1: 1.8dB, 2: 5.5dB, 3: 12.9dB, 4: 30.2dB, 5: 66.1dB, 6: 144dB
    */
    void set_gain_index(gain_index, verify=True);

    /** Enable or disable acoustic measurements.
    *   @param enable - 0: Disable, 1: Enable.
    */
    void set_ping_enable(enable, verify=True);


    /** Return the latest value received
    */
    uint16_t num_points() return _num_points;

    /** Return the latest value received
    */
    uint16_t mvolts() return _mvolts;

    /** Return the latest value received
    */
    uint16_t confidence() return _confidence;

    /** Return the latest value received
    */
    uint8_t device_type() return _device_type;

    /** Return the latest value received
    */
    uint16_t temp() return _temp;

    /** Return the latest value received
    */
    uint32_t distance() return _distance;

    /** Return the latest value received
    */
    uint8_t device_model() return _device_model;

    /** Return the latest value received
    */
    uint32_t speed_of_sound() return _speed_of_sound;

    /** Return the latest value received
    */
    uint16_t fw_version_major() return _fw_version_major;

    /** Return the latest value received
    */
    uint32_t ping_number() return _ping_number;

    /** Return the latest value received
    */
    uint8_t data() return _data;

    /** Return the latest value received
    */
    uint8_t mode_auto() return _mode_auto;

    /** Return the latest value received
    */
    uint32_t scan_start() return _scan_start;

    /** Return the latest value received
    */
    uint16_t fw_version_minor() return _fw_version_minor;

    /** Return the latest value received
    */
    uint32_t protocol_version() return _protocol_version;

    /** Return the latest value received
    */
    uint32_t scan_length() return _scan_length;

    /** Return the latest value received
    */
    uint32_t gain_index() return _gain_index;

    /** Return the latest value received
    */
    uint16_t ping_rate() return _ping_rate;

    /** Return the latest value received
    */
    uint16_t pulse_usec() return _pulse_usec;

    /** Return the latest value received
    */
    uint8_t device_id() return _device_id;


private:
  Stream& _stream;
  PingParser _parser;

    uint16_t _num_points;
    uint16_t _mvolts;
    uint16_t _confidence;
    uint8_t _device_type;
    uint16_t _temp;
    uint32_t _distance;
    uint8_t _device_model;
    uint32_t _speed_of_sound;
    uint16_t _fw_version_major;
    uint32_t _ping_number;
    uint8_t _data;
    uint8_t _mode_auto;
    uint32_t _scan_start;
    uint16_t _fw_version_minor;
    uint32_t _protocol_version;
    uint32_t _scan_length;
    uint32_t _gain_index;
    uint16_t _ping_rate;
    uint16_t _pulse_usec;
    uint8_t _device_id;
};
